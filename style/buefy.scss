$switch-width-number: 2.75 !default;
$switch-width: $switch-width-number * 1em !default;
$switch-padding: 0.2em !default;
$speed-slow: 150ms !default;
$speed-slower: 250ms !default;

$primary: #7957d5 !default;
$primary-invert: $white !default;

$info: #167df0 !default;

$link: $primary !default;
$link-invert: $primary-invert !default;
$link-visited: $grey !default;
$link-focus-border: $primary !default;

$label-weight: $weight-semibold !default;

$switch-active-background-color: $primary !default;


$dropdown-mobile-breakpoint: $desktop !default;
$dropdown-background-color: rgba($black, 0.86) !default;
$dropdown-disabled-opacity: 0.5 !default;

.dropdown {
    & + .dropdown {
        margin-left: 0.5em;
    }

    .background {
        @include overlay;
        position: fixed;
        background-color: $dropdown-background-color;
        z-index: 40;
        cursor: pointer;
        @media screen and (min-width: $dropdown-mobile-breakpoint) {
            display: none;
        }
    }

    .dropdown-menu {
        .dropdown-item {
            &.is-disabled {
                cursor: not-allowed;

                &:hover {
                    background: inherit;
                    color: inherit;
                }
            }
        }

        .has-link a {
            @extend .dropdown-item;
            padding-right: 3rem;
            white-space: nowrap;
        }
    }

    &.is-expanded {
        width: 100%;

        .dropdown-trigger {
            width: 100%;
        }

        .dropdown-menu {
            width: 100%;
        }

        &.is-mobile-modal {
            .dropdown-menu {
                max-width: 100%;
            }
        }
    }

    &:not(.is-disabled) {
        .dropdown-menu {
            .dropdown-item {
                &.is-disabled {
                    opacity: $dropdown-disabled-opacity;
                }
            }
        }
    }

    .navbar-item {
        height: 100%;
    }

    &.is-disabled {
        opacity: $dropdown-disabled-opacity;
        cursor: not-allowed;

        .dropdown-trigger {
            pointer-events: none;
        }
    }

    &.is-inline {
        .dropdown-menu {
            position: static;
            display: inline-block;
            padding: 0;
        }
    }

    &.is-top-right {
        .dropdown-menu {
            top: auto;
            bottom: 100%;
        }
    }

    &.is-top-left {
        .dropdown-menu {
            top: auto;
            bottom: 100%;
            right: 0;
            left: auto;
        }
    }

    &.is-bottom-left {
        .dropdown-menu {
            right: 0;
            left: auto;
        }
    }

    @media screen and (max-width: $dropdown-mobile-breakpoint - 1px) {
        &.is-mobile-modal {
            > .dropdown-menu {
                position: fixed;
                width: calc(100vw - 40px);
                max-width: 460px;
                max-height: calc(100vh - 120px);
                top: 25% !important;
                left: 50% !important;
                bottom: auto !important;
                right: auto !important;
                transform: translate3d(-50%, -25%, 0);
                white-space: normal;
                overflow-y: auto;
                z-index: 50;

                > .dropdown-content {
                    > .dropdown-item {
                        padding: 1rem 1.5rem;
                    }
                }
            }
        }
    }
}

.switch {
    @extend %unselectable;
    cursor: pointer;
    display: inline-flex;
    align-items: center;
    position: relative;

    & + .switch {
        margin-left: 0.5em;
    }

    input[type=checkbox] {
        position: absolute;
        left: 0;
        opacity: 0;
        outline: none;
        z-index: -1;

        + .check {
            display: flex;
            align-items: center;
            flex-shrink: 0;
            width: $switch-width;
            height: #{$switch-width / 2 + $switch-padding};
            padding: $switch-padding;
            background: $grey-light;
            border-radius: $radius;
            transition: background $speed-slow $easing;

            &:before {
                content: "";
                display: block;
                border-radius: $radius;
                width: #{($switch-width - $switch-padding * 2) / 2};
                height: #{($switch-width - $switch-padding * 2) / 2};
                background: $background;
                box-shadow: 0 3px 1px 0 rgba(0, 0, 0, 0.05), 0 2px 2px 0 rgba(0, 0, 0, 0.1), 0 3px 3px 0 rgba(0, 0, 0, 0.05);
                transition: transform $speed-slow $easing, width $speed-slow $easing;
                will-change: transform;
            }

            &.is-elastic:before {
                width: 1.75em;
            }
        }

        &:checked + .check {
            background: $switch-active-background-color;
            @each $name, $pair in $colors {
                $color: nth($pair, 1);
                &.is-#{$name} {
                    background: $color;
                }
            }

            &:before {
                transform: translate3d(100%, 0, 0);
            }

            &.is-elastic:before {
                // Might be a little offset if base font is not 16px
                transform: translate3d(percentage(16 / ($switch-width-number * 16)), 0, 0);
            }
        }

        &:focus {
            outline: none;

            + .check {
                box-shadow: 0 0 0.5em rgba($grey, 0.6);
            }

            &:checked + .check {
                box-shadow: 0 0 0.5em rgba($switch-active-background-color, 0.8);
                @each $name, $pair in $colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        box-shadow: 0 0 0.5em rgba($color, 0.8);
                    }
                }
            }
        }
    }

    .control-label {
        padding-left: 0.5em;
    }

    &:hover {
        input[type=checkbox] + .check {
            background: rgba($grey-light, 0.9);
        }

        input[type=checkbox]:checked + .check {
            background: rgba($switch-active-background-color, 0.9);
            @each $name, $pair in $colors {
                $color: nth($pair, 1);
                &.is-#{$name} {
                    background: rgba($color, 0.9);
                }
            }
        }
    }

    &.is-rounded {
        input[type=checkbox] {
            + .check {
                border-radius: $radius-rounded;

                &:before {
                    border-radius: $radius-rounded;
                }
            }
        }
    }

    &.is-outlined {
        input[type=checkbox] {
            + .check {
                background: transparent;
                border: .1rem solid $grey-light;

                &:before {
                    background: $grey-light;
                }
            }

            &:checked + .check {
                border-color: $switch-active-background-color;
                @each $name, $pair in $colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        background: transparent;
                        border-color: $color;

                        &:before {
                            background: $color;
                        }
                    }
                }

                &:before {
                    background: $switch-active-background-color;
                }
            }
        }

        &:hover {
            input[type=checkbox] + .check {
                background: transparent;
                border-color: rgba($grey-light, 0.9);
            }

            input[type=checkbox]:checked + .check {
                background: transparent;
                border-color: rgba($switch-active-background-color, 0.9);
                @each $name, $pair in $colors {
                    $color: nth($pair, 1);
                    &.is-#{$name} {
                        border-color: rgba($color, 0.9);
                    }
                }
            }
        }
    }

    &.is-small {
        @include control-small;
    }

    &.is-medium {
        @include control-medium;
    }

    &.is-large {
        @include control-large;
    }

    &[disabled] {
        opacity: 0.5;
        cursor: not-allowed;
        color: $grey;
    }
}

.autocomplete {
    position: relative;

    .dropdown-menu {
        display: block;
        min-width: 100%;
        max-width: 100%;

        &.is-opened-top {
            top: auto;
            bottom: 100%;
        }
    }

    .dropdown-content {
        overflow: auto;
        max-height: 200px;
    }

    .dropdown-item {
        white-space: nowrap;
        overflow: hidden;
        text-overflow: ellipsis;

        &.is-hovered {
            background: $dropdown-item-hover-background-color;
            color: $dropdown-item-hover-color;
        }

        &.is-disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }
    }

    &.is-small {
        @include control-small;
    }

    &.is-medium {
        @include control-medium;
    }

    &.is-large {
        @include control-large;
    }
}

.tag {
    .has-ellipsis {
        max-width: 10em;
        overflow: hidden;
        white-space: nowrap;
        text-overflow: ellipsis;
    }
}

$taginput-height: 1.7em !default;

.taginput {
    .taginput-container {
        &.is-focusable {
            @extend .input;
            padding-bottom: 0;
            padding-top: calc(0.275em - 1px);
            padding-left: 0;
            align-items: center;
            display: flex;
            flex-wrap: wrap;
            justify-content: flex-start;
            height: auto;
            cursor: text;
        }

        > .tag,
        > .tags {
            margin-left: 0.275rem;
            margin-bottom: calc(0.275em - 1px);
            font-size: 0.9em;
            height: $taginput-height;

            .tag {
                margin-bottom: 0;
                font-size: 0.9em;
                height: $taginput-height;

                &.is-delete {
                    width: $taginput-height;
                }
            }
        }

        .autocomplete {
            flex: 1;

            input {
                height: $taginput-height;
                margin-bottom: calc(0.275em - 1px);
                padding-top: 0;
                padding-bottom: 0;
                border: none;
                box-shadow: none;
                min-width: 8em;

                &:focus {
                    box-shadow: none !important;
                }
            }

            .icon {
                height: $taginput-height;
            }

            > .control.is-loading::after {
                top: 0.375em;
            }
        }
    }
}

// Rate
$rate-color: $grey-lighter !default;
$rate-color-active: #908f8f;
$rate-spaced: 0.25rem !default;
$rate-text-spaced: 0.35rem !default;

.rate {
    align-items: center;
    display: flex;

    &:not(:last-child) {
        margin-bottom: ($block-spacing / 2);
    }

    &.is-spaced .rate-item:not(:last-child) {
        margin-right: $rate-spaced;
    }

    &.is-disabled .rate-item {
        cursor: initial;

        &:hover {
            transform: none;
        }
    }

    &.is-rtl {
        .rate-item {
            order: 1;
        }

        .rate-text {
            margin-left: 0;
            margin-right: $rate-text-spaced;
        }
    }

    .rate-item {
        cursor: pointer;
        display: inline-flex;
        position: relative;
        transition: all 0.3s;

        &:hover {
            transform: scale(1.1);
        }

        &.set-on .icon,
        &.set-half .is-half {
            color: $rate-color-active;

            svg {
                fill: $rate-color-active;
            }
        }

        &.set-half .is-half {
            position: absolute;
            left: 0;
            top: 0;
            overflow: hidden;
        }
    }

    .icon {
        color: $rate-color;
        line-height: 1;
        pointer-events: none;
        width: inherit;

        svg {
            fill: $rate-color;
        }
    }

    .is-half > i {
        position: absolute;
        left: 0;
    }

    .rate-text {
        font-size: calc(#{$size-normal} / 1.25);
        margin-left: $rate-text-spaced;

        &.is-small {
            font-size: calc(#{$size-small} / 1.25);
        }

        &.is-medium {
            font-size: calc(#{$size-medium} / 1.25);
        }

        &.is-large {
            font-size: calc(#{$size-large} / 1.25);
        }
    }
}

// Upload
.upload {
    position: relative;
    display: inline-flex;
    width: 100%;
    height: 100%;

    input[type=file] {
        position: absolute;
        top: 0;
        left: 0;
        width: 100%;
        height: 100%;
        opacity: 0;
        outline: none;
        cursor: pointer;
        z-index: -1;
    }

    .upload-draggable {
        width: 100%;
        height: 100%;
        cursor: pointer;
        padding: 0.25em;
        border: 1px dashed $grey-light;
        display: flex;
        flex-direction: column;
        justify-content: center;
        justify-items: center;

        &.is-disabled {
            opacity: 0.5;
            cursor: not-allowed;
        }

        &.is-loading {
            position: relative;
            pointer-events: none;
            opacity: 0.5;

            &:after {
                @include loader;
                top: 0;
                left: calc(50% - 1.5em);
                width: 3em;
                height: 3em;
                border-width: 0.25em;
            }
        }

        &:hover,
        &.is-hovered {
            @each $name, $pair in $colors {
                $color: nth($pair, 1);
                &.is-#{$name} {
                    border-color: $color;
                    background: rgba($color, 0.05);
                }
            }
        }

        &.is-expanded {
            width: 100%;
        }
    }

    &.is-expanded {
        width: 100%;
    }
}

// temporary IE 11 hack !!!
@media screen and (-ms-high-contrast: active), screen and (-ms-high-contrast: none) {
    .upload {
        input[type=file] {
            z-index: auto;
        }

        .upload-draggable + input[type=file] {
            z-index: -1;
        }
    }
}


// Some of the animations are from animate.css (https://daneden.github.io/animate.css)

// Fade out
@keyframes fadeOut {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
    }
}

.fadeOut {
    animation-name: fadeOut;
}

@keyframes fadeOutDown {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }
}

.fadeOutDown {
    animation-name: fadeOutDown;
}

@keyframes fadeOutUp {
    from {
        opacity: 1;
    }
    to {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
}

.fadeOutUp {
    animation-name: fadeOutUp;
}

// Fade In
@keyframes fadeIn {
    from {
        opacity: 0;
    }
    to {
        opacity: 1;
    }
}

.fadeIn {
    animation-name: fadeIn;
}

@keyframes fadeInDown {
    from {
        opacity: 0;
        transform: translate3d(0, -100%, 0);
    }
    to {
        opacity: 1;
        transform: none;
    }
}

.fadeInDown {
    animation-name: fadeInDown;
}

@keyframes fadeInUp {
    from {
        opacity: 0;
        transform: translate3d(0, 100%, 0);
    }
    to {
        opacity: 1;
        transform: none;
    }
}

.fadeInUp {
    animation-name: fadeInUp;
}

/**
 * Vue Transitions
 */

// Fade
.fade-enter-active,
.fade-leave-active {
    transition: opacity $speed-slow $easing;
}

.fade-enter,
.fade-leave-to {
    opacity: 0;
}

// Zoom In
.zoom-in-enter-active,
.zoom-in-leave-active {
    transition: opacity $speed-slow $easing;

    .animation-content,
    .animation-content {
        transition: transform $speed-slow $easing;
    }
}

.zoom-in-enter,
.zoom-in-leave-active {
    opacity: 0;

    .animation-content,
    .animation-content {
        transform: scale(0.95);
    }
}


// Zoom Out
.zoom-out-enter-active,
.zoom-out-leave-active {
    transition: opacity $speed-slow $easing;

    .animation-content,
    .animation-content {
        transition: transform $speed-slow $easing;
    }
}

.zoom-out-enter,
.zoom-out-leave-active {
    opacity: 0;

    .animation-content,
    .animation-content {
        transform: scale(1.05);
    }
}

// Slide
.slide-next-enter-active,
.slide-next-leave-active,
.slide-prev-enter-active,
.slide-prev-leave-active {
    transition: transform $speed-slower cubic-bezier(0.785, 0.135, 0.150, 0.860);
}

.slide-prev-leave-to, .slide-next-enter {
    transform: translate3d(-100%, 0, 0);
    position: absolute;
    width: 100%;
}

.slide-prev-enter, .slide-next-leave-to {
    transform: translate3d(100%, 0, 0);
    position: absolute;
    width: 100%;
}

// Rate

$tooltip-arrow-size: 5px !default;
$tooltip-arrow-margin: 2px !default;

$tooltip-multiline-sizes: (
    small: 180px,
    medium: 240px,
    large: 300px
) !default;

@mixin tooltip-arrow($direction, $color) {
    @if ($direction == "is-top") {
        border-top: $tooltip-arrow-size solid $color;
        border-right: $tooltip-arrow-size solid transparent;
        border-left: $tooltip-arrow-size solid transparent;
        bottom: calc(100% + #{$tooltip-arrow-margin});
    } @else if ($direction == "is-bottom") {
        border-right: $tooltip-arrow-size solid transparent;
        border-bottom: $tooltip-arrow-size solid $color;
        border-left: $tooltip-arrow-size solid transparent;
        top: calc(100% + #{$tooltip-arrow-margin});
    } @else if ($direction == "is-right") {
        border-top: $tooltip-arrow-size solid transparent;
        border-right: $tooltip-arrow-size solid $color;
        border-bottom: $tooltip-arrow-size solid transparent;
        left: calc(100% + #{$tooltip-arrow-margin});
    } @else if ($direction == "is-left") {
        border-top: $tooltip-arrow-size solid transparent;
        border-bottom: $tooltip-arrow-size solid transparent;
        border-left: $tooltip-arrow-size solid $color;
        right: calc(100% + #{$tooltip-arrow-margin});
    }
}

@mixin tooltip($direction) {
    &.#{$direction} {
        &:before,
        &:after {
            @if ($direction == "is-top") {
                top: auto;
                right: auto;
                bottom: calc(100% + #{$tooltip-arrow-size} + #{$tooltip-arrow-margin});
                left: 50%;
                transform: translateX(-50%);
            } @else if ($direction == "is-bottom") {
                top: calc(100% + #{$tooltip-arrow-size} + #{$tooltip-arrow-margin});
                right: auto;
                bottom: auto;
                left: 50%;
                transform: translateX(-50%);
            } @else if ($direction == "is-right") {
                top: 50%;
                right: auto;
                bottom: auto;
                left: calc(100% + #{$tooltip-arrow-size} + #{$tooltip-arrow-margin});
                transform: translateY(-50%);
            } @else if ($direction == "is-left") {
                top: 50%;
                right: calc(100% + #{$tooltip-arrow-size} + #{$tooltip-arrow-margin});
                bottom: auto;
                left: auto;
                transform: translateY(-50%);
            }
        }
        @each $name, $pair in $colors {
            $color: nth($pair, 1);
            &.is-#{$name}:before {
                @include tooltip-arrow($direction, $color)
            }
        }
        &.is-multiline {
            @each $name, $size in $tooltip-multiline-sizes {
                &.is-#{$name}:after {
                    width: $size;
                }
            }
        }
    }
}

// Base
.b-tooltip {
    @include tooltip("is-top");
    @include tooltip("is-right");
    @include tooltip("is-bottom");
    @include tooltip("is-left");
    position: relative;
    display: inline-flex;
    &:before,
    &:after {
        position: absolute;
        content: "";
        opacity: 0;
        visibility: hidden;
        pointer-events: none;
    }
    &:before {
        z-index: 39;
    }
    &:after {
        content: attr(data-label);
        width: auto;
        padding: 0.35rem 0.75rem;
        border-radius: $radius-large;
        font-size: 0.85rem;
        font-weight: $weight-normal;
        box-shadow: 0px 1px 2px 1px rgba(0, 1, 0, 0.2);
        z-index: 38;
        white-space: nowrap;
    }
    &:not([data-label=""]):hover:before,
    &:not([data-label=""]):hover:after {
        transition-delay: inherit;
        opacity: 1;
        visibility: visible;
    }
    // Modifiers
    @each $name, $pair in $colors {
        $color: nth($pair, 1);
        $color-invert: nth($pair, 2);
        &.is-#{$name}:after {
            background: $color;
            color: $color-invert;
        }
    }
    &:not([data-label=""]).is-always {
        &:before,
        &:after {
            opacity: 1;
            visibility: visible;
        }
    }
    &.is-multiline {
        &:after {
            display: flex-block;
            text-align: center;
            white-space: normal;
        }
    }
    &.is-dashed {
        border-bottom: 1px dashed $grey-light;
        cursor: default;
    }
    &.is-square {
        &:after {
            border-radius: 0;
        }
    }
    &.is-animated {
        &:before,
        &:after {
            transition: opacity $speed $easing, visibility $speed $easing;
        }
    }
}
